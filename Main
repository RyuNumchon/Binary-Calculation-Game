// Include necessary libraries
#include <Arduino.h>

// Define pins and constants
#define LED1_PIN 2
#define LED2_PIN 3
#define LED3_PIN 4
#define LED4_PIN 5
#define LED_ACTION_PIN 6
#define LED_SKIP_PIN 7
#define SWITCH1_PIN 8
#define SWITCH2_PIN 9
#define SWITCH3_PIN 10
#define SWITCH4_PIN 11
#define LDR_PIN A0
#define MOTOR_PIN 12
#define BASE_PIN 13
#define NUM_LEVELS 10

// Initialize global variables
int level = 1;
int sequence[NUM_LEVELS];
int sequence_length;
int player_sequence[NUM_LEVELS];
int player_sequence_length = 0;
int skip = 0;
int action_led_state = HIGH;

// Generate random sequence for given level
void generate_sequence() {
  for (int i = 0; i < level; i++) {
    sequence[i] = random(1, 5);
  }
  sequence_length = level;
}

// Display sequence to player
void display_sequence() {
  for (int i = 0; i < sequence_length; i++) {
    digitalWrite(sequence[i] + 1, HIGH);
    delay(500 - (level * 20));
    digitalWrite(sequence[i] + 1, LOW);
    delay(100 - (level * 10));
  }
  player_sequence_length = 0;
}

// Check player input against sequence
int check_input() {
  for (int i = 0; i < player_sequence_length; i++) {
    if (player_sequence[i] != sequence[i]) {
      return 0;
    }
  }
  return 1;
}

// Turn on/off action LED based on state
void action_led() {
  if (action_led_state == HIGH) {
    digitalWrite(LED_ACTION_PIN, HIGH);
    delay(1000);
    digitalWrite(LED_ACTION_PIN, LOW);
    delay(100);
    skip = 0;
  }
  else {
    digitalWrite(LED_SKIP_PIN, HIGH);
    delay(1000);
    digitalWrite(LED_SKIP_PIN, LOW);
    delay(100);
    skip = 1;
  }
  action_led_state = !action_led_state;
}

// Turn on LED for correct input and turn off for incorrect input
void correct_input() {
  digitalWrite(LED2_PIN + player_sequence[player_sequence_length - 1], HIGH);
  delay(500);
  digitalWrite(LED2_PIN + player_sequence[player_sequence_length - 1], LOW);
  delay(100);
}

void incorrect_input() {
  digitalWrite(LED1_PIN, HIGH);
  delay(500);
  digitalWrite(LED1_PIN, LOW);
  delay(100);
}

// Turn on DC motor for winning state
void winning_state() {
  digitalWrite(LED1_PIN, HIGH);
  digitalWrite(LED2_PIN, HIGH);
  digitalWrite(LED3_PIN, HIGH);
  digitalWrite(LED4_PIN, HIGH);
  digitalWrite(MOTOR_PIN, HIGH);
  delay(5000);
  digitalWrite(LED1_PIN, LOW);
  digitalWrite(LED2_PIN, LOW);
  digitalWrite(LED3_PIN, LOW);
  digitalWrite(LED4_PIN, LOW);
  digitalWrite(MOTOR_PIN, LOW);
}

// Main program loop
void loop() {
  // Generate sequence and display to player
  generate_sequence();
  display_sequence();
  // Loop through sequence and get player input
  for (int i = 0; i < sequence_length; i++) {
    if (action_led_state == HIGH) {
      action_led();
    }
    if (!skip) {
      switch (digitalRead(SWITCH1_PIN
